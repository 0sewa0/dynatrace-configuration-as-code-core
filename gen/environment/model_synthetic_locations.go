/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environment

import (
	"encoding/json"
	"fmt"
)

// checks if the SyntheticLocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticLocations{}

// SyntheticLocations A list of synthetic locations.
type SyntheticLocations struct {
	// A list of synthetic locations.
	Locations []LocationCollectionElement `json:"locations"`
}

type _SyntheticLocations SyntheticLocations

// NewSyntheticLocations instantiates a new SyntheticLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticLocations(locations []LocationCollectionElement) *SyntheticLocations {
	this := SyntheticLocations{}
	this.Locations = locations
	return &this
}

// NewSyntheticLocationsWithDefaults instantiates a new SyntheticLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticLocationsWithDefaults() *SyntheticLocations {
	this := SyntheticLocations{}
	return &this
}

// GetLocations returns the Locations field value
func (o *SyntheticLocations) GetLocations() []LocationCollectionElement {
	if o == nil {
		var ret []LocationCollectionElement
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocations) GetLocationsOk() ([]LocationCollectionElement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *SyntheticLocations) SetLocations(v []LocationCollectionElement) {
	o.Locations = v
}

func (o SyntheticLocations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticLocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locations"] = o.Locations
	return toSerialize, nil
}

func (o *SyntheticLocations) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyntheticLocations := _SyntheticLocations{}

	err = json.Unmarshal(bytes, &varSyntheticLocations)

	if err != nil {
		return err
	}

	*o = SyntheticLocations(varSyntheticLocations)

	return err
}

type NullableSyntheticLocations struct {
	value *SyntheticLocations
	isSet bool
}

func (v NullableSyntheticLocations) Get() *SyntheticLocations {
	return v.value
}

func (v *NullableSyntheticLocations) Set(val *SyntheticLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticLocations(val *SyntheticLocations) *NullableSyntheticLocations {
	return &NullableSyntheticLocations{value: val, isSet: true}
}

func (v NullableSyntheticLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
