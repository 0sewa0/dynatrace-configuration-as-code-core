/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environment

import (
	"encoding/json"
)

// checks if the AgentPotentialProblem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentPotentialProblem{}

// AgentPotentialProblem One agent auto-update blocking problem for a specific version and OS, with a list of affected hosts.
type AgentPotentialProblem struct {
	// All hosts that are affected by the auto-update problem, given by ME Identifier
	Hosts []string `json:"hosts,omitempty"`
	// Installer OS type
	OsType *string `json:"osType,omitempty"`
	// Formatted Installer version
	Version *string `json:"version,omitempty"`
}

// NewAgentPotentialProblem instantiates a new AgentPotentialProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentPotentialProblem() *AgentPotentialProblem {
	this := AgentPotentialProblem{}
	return &this
}

// NewAgentPotentialProblemWithDefaults instantiates a new AgentPotentialProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentPotentialProblemWithDefaults() *AgentPotentialProblem {
	this := AgentPotentialProblem{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *AgentPotentialProblem) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentPotentialProblem) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *AgentPotentialProblem) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *AgentPotentialProblem) SetHosts(v []string) {
	o.Hosts = v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *AgentPotentialProblem) GetOsType() string {
	if o == nil || IsNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentPotentialProblem) GetOsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *AgentPotentialProblem) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *AgentPotentialProblem) SetOsType(v string) {
	o.OsType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AgentPotentialProblem) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentPotentialProblem) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AgentPotentialProblem) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AgentPotentialProblem) SetVersion(v string) {
	o.Version = &v
}

func (o AgentPotentialProblem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentPotentialProblem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAgentPotentialProblem struct {
	value *AgentPotentialProblem
	isSet bool
}

func (v NullableAgentPotentialProblem) Get() *AgentPotentialProblem {
	return v.value
}

func (v *NullableAgentPotentialProblem) Set(val *AgentPotentialProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentPotentialProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentPotentialProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentPotentialProblem(val *AgentPotentialProblem) *NullableAgentPotentialProblem {
	return &NullableAgentPotentialProblem{value: val, isSet: true}
}

func (v NullableAgentPotentialProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentPotentialProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
