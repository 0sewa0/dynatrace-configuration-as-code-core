/*
Dynatrace Environment API

Documentation of the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package environment

import (
	"encoding/json"
)

// checks if the AgentPotentialProblemsState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentPotentialProblemsState{}

// AgentPotentialProblemsState All agent potential auto-update problems aggregated over all servers for this tenant.
type AgentPotentialProblemsState struct {
	// List of all agent auto-update blocking problems
	AutoUpdateProblems []AgentPotentialProblem `json:"autoUpdateProblems,omitempty"`
}

// NewAgentPotentialProblemsState instantiates a new AgentPotentialProblemsState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentPotentialProblemsState() *AgentPotentialProblemsState {
	this := AgentPotentialProblemsState{}
	return &this
}

// NewAgentPotentialProblemsStateWithDefaults instantiates a new AgentPotentialProblemsState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentPotentialProblemsStateWithDefaults() *AgentPotentialProblemsState {
	this := AgentPotentialProblemsState{}
	return &this
}

// GetAutoUpdateProblems returns the AutoUpdateProblems field value if set, zero value otherwise.
func (o *AgentPotentialProblemsState) GetAutoUpdateProblems() []AgentPotentialProblem {
	if o == nil || IsNil(o.AutoUpdateProblems) {
		var ret []AgentPotentialProblem
		return ret
	}
	return o.AutoUpdateProblems
}

// GetAutoUpdateProblemsOk returns a tuple with the AutoUpdateProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentPotentialProblemsState) GetAutoUpdateProblemsOk() ([]AgentPotentialProblem, bool) {
	if o == nil || IsNil(o.AutoUpdateProblems) {
		return nil, false
	}
	return o.AutoUpdateProblems, true
}

// HasAutoUpdateProblems returns a boolean if a field has been set.
func (o *AgentPotentialProblemsState) HasAutoUpdateProblems() bool {
	if o != nil && !IsNil(o.AutoUpdateProblems) {
		return true
	}

	return false
}

// SetAutoUpdateProblems gets a reference to the given []AgentPotentialProblem and assigns it to the AutoUpdateProblems field.
func (o *AgentPotentialProblemsState) SetAutoUpdateProblems(v []AgentPotentialProblem) {
	o.AutoUpdateProblems = v
}

func (o AgentPotentialProblemsState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentPotentialProblemsState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoUpdateProblems) {
		toSerialize["autoUpdateProblems"] = o.AutoUpdateProblems
	}
	return toSerialize, nil
}

type NullableAgentPotentialProblemsState struct {
	value *AgentPotentialProblemsState
	isSet bool
}

func (v NullableAgentPotentialProblemsState) Get() *AgentPotentialProblemsState {
	return v.value
}

func (v *NullableAgentPotentialProblemsState) Set(val *AgentPotentialProblemsState) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentPotentialProblemsState) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentPotentialProblemsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentPotentialProblemsState(val *AgentPotentialProblemsState) *NullableAgentPotentialProblemsState {
	return &NullableAgentPotentialProblemsState{value: val, isSet: true}
}

func (v NullableAgentPotentialProblemsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentPotentialProblemsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
